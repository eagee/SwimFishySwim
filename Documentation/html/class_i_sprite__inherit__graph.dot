digraph "ISprite"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ISprite\n||+ ISprite()\l+ ~ISprite()\l+ setID()\l+ getID()\l+ isDead()\l+ assignModel()\l+ assignWeapon()\l+ lockOnTarget()\l+ checkDirection()\l+ handleCollision()\l+ handleJump()\l+ setDirection()\l+ unsetDirection()\l+ translateSprite()\l+ updateLocationByVelocity()\l+ getLocation()\l+ getBoundingTriangle()\l+ getBoundingCircle()\l+ setBoundingTriangleSize()\l+ getBoundingBox()\l+ setLocation()\l+ setOffset()\l+ getOffset()\l+ spriteWidth()\l+ spriteHeight()\l+ setVelocities()\l+ increaseAcceleration()\l+ setControlMagnitude()\l+ setAngle()\l+ getAngle()\l+ getControlAngle()\l+ renderSprite()\l+ renderHealthBar()\l+ spriteType()\l+ setAnimation()\l+ getCurrentAnimation()\l+ setHealth()\l+ modifyHealthBy()\l+ getHealth()\l+ getMaxHealth()\l+ setPointValue()\l+ getPointValue()\l+ setLevel()\l+ getLevel()\l+ setPowerUpType()\l+ getPowerUpType()\l+ getWaterLevel()\l+ setWaterLevel()\l+ setJump()\l+ getJump()\l+ getSpeed()\l+ setAttackType()\l+ getAttackType()\l+ modifyRotationBy()\l+ hasPeriodicTimerExpired()\l+ getVelocity()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{OverSprite\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_over_sprite.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{SpriteBaddie\n||+ SpriteBaddie()\l+ ~SpriteBaddie()\l+ setID()\l+ getID()\l+ isDead()\l+ assignModel()\l+ assignWeapon()\l+ lockOnTarget()\l+ checkDirection()\l+ handleCollision()\l+ handleJump()\l+ setDirection()\l+ unsetDirection()\l+ translateSprite()\l+ updateLocationByVelocity()\l+ getLocation()\l+ getWaterLevel()\l+ setWaterLevel()\l+ setJump()\l+ getJump()\l+ getSpeed()\l+ getBoundingTriangle()\l+ getBoundingCircle()\l+ setBoundingTriangleSize()\l+ getBoundingBox()\l+ setLocation()\l+ setOffset()\l+ getOffset()\l+ spriteWidth()\l+ spriteHeight()\l+ setVelocities()\l+ increaseAcceleration()\l+ setControlMagnitude()\l+ setAngle()\l+ getControlAngle()\l+ getAngle()\l+ renderSprite()\l+ renderHealthBar()\l+ spriteType()\l+ setAnimation()\l+ getCurrentAnimation()\l+ setHealth()\l+ modifyHealthBy()\l+ getHealth()\l+ getMaxHealth()\l+ getPointValue()\l+ setPointValue()\l+ setLevel()\l+ getLevel()\l+ setPowerUpType()\l+ getPowerUpType()\l+ addWaypoint()\l+ getCurrentWaypoint()\l+ clearWaypoints()\l+ setAttackType()\l+ getAttackType()\l+ modifyRotationBy()\l+ hasPeriodicTimerExpired()\l+ getVelocity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sprite_baddie.html",tooltip=" "];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{SpriteBullet\n||+ SpriteBullet()\l+ ~SpriteBullet()\l+ setID()\l+ getID()\l+ isDead()\l+ assignModel()\l+ assignWeapon()\l+ lockOnTarget()\l+ checkDirection()\l+ handleCollision()\l+ handleJump()\l+ setDirection()\l+ unsetDirection()\l+ translateSprite()\l+ updateLocationByVelocity()\l+ getLocation()\l+ getBoundingTriangle()\l+ getBoundingCircle()\l+ setBoundingTriangleSize()\l+ getBoundingBox()\l+ setLocation()\l+ setOffset()\l+ getOffset()\l+ spriteWidth()\l+ spriteHeight()\l+ setVelocities()\l+ increaseAcceleration()\l+ setControlMagnitude()\l+ setAngle()\l+ getAngle()\l+ getControlAngle()\l+ renderSprite()\l+ renderHealthBar()\l+ spriteType()\l+ setAnimation()\l+ getCurrentAnimation()\l+ setHealth()\l+ modifyHealthBy()\l+ getHealth()\l+ getMaxHealth()\l+ getPointValue()\l+ setPointValue()\l+ setLevel()\l+ getLevel()\l+ setPowerUpType()\l+ getPowerUpType()\l+ getWaterLevel()\l+ setWaterLevel()\l+ setJump()\l+ getJump()\l+ getSpeed()\l+ setAttackType()\l+ getAttackType()\l+ modifyRotationBy()\l+ hasPeriodicTimerExpired()\l+ getVelocity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sprite_bullet.html",tooltip="Provides an interface for sprite behavior, whether that is a player sprite, or an NPC of some sort ...."];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{SpriteEffect\n||+ SpriteEffect()\l+ ~SpriteEffect()\l+ setID()\l+ getID()\l+ isDead()\l+ assignModel()\l+ assignWeapon()\l+ lockOnTarget()\l+ checkDirection()\l+ handleCollision()\l+ handleJump()\l+ setDirection()\l+ unsetDirection()\l+ translateSprite()\l+ updateLocationByVelocity()\l+ getLocation()\l+ getBoundingTriangle()\l+ getBoundingCircle()\l+ setBoundingTriangleSize()\l+ getBoundingBox()\l+ setLocation()\l+ setOffset()\l+ getOffset()\l+ spriteWidth()\l+ spriteHeight()\l+ setVelocities()\l+ increaseAcceleration()\l+ setControlMagnitude()\l+ setAngle()\l+ getAngle()\l+ getControlAngle()\l+ renderSprite()\l+ renderHealthBar()\l+ spriteType()\l+ setAnimation()\l+ getCurrentAnimation()\l+ setHealth()\l+ modifyHealthBy()\l+ getHealth()\l+ getMaxHealth()\l+ getPointValue()\l+ setPointValue()\l+ setLevel()\l+ getLevel()\l+ setPowerUpType()\l+ getPowerUpType()\l+ getWaterLevel()\l+ setWaterLevel()\l+ setJump()\l+ getJump()\l+ getSpeed()\l+ setAttackType()\l+ getAttackType()\l+ modifyRotationBy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sprite_effect.html",tooltip="Provides an interface for sprite behavior, whether that is a player sprite, or an NPC of some sort ...."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{SpritePlayer\n||+ SpritePlayer()\l+ ~SpritePlayer()\l+ setID()\l+ getID()\l+ isDead()\l+ assignModel()\l+ assignWeapon()\l+ lockOnTarget()\l+ checkDirection()\l+ handleCollision()\l+ handleJump()\l+ setDirection()\l+ unsetDirection()\l+ translateSprite()\l+ updateLocationByVelocity()\l+ getLocation()\l+ getBoundingTriangle()\l+ getBoundingCircle()\l+ setBoundingTriangleSize()\l+ getBoundingBox()\l+ setLocation()\l+ setOffset()\l+ getOffset()\l+ spriteWidth()\l+ spriteHeight()\l+ setVelocities()\l+ increaseAcceleration()\l+ setControlMagnitude()\l+ setAngle()\l+ getAngle()\l+ getControlAngle()\l+ renderSprite()\l+ renderHealthBar()\l+ spriteType()\l+ setAnimation()\l+ getCurrentAnimation()\l+ setHealth()\l+ modifyHealthBy()\l+ getHealth()\l+ getMaxHealth()\l+ getPointValue()\l+ setPointValue()\l+ setLevel()\l+ getLevel()\l+ setPowerUpType()\l+ getPowerUpType()\l+ getWaterLevel()\l+ setWaterLevel()\l+ setJump()\l+ getJump()\l+ getSpeed()\l+ setAttackType()\l+ getAttackType()\l+ modifyRotationBy()\l+ hasPeriodicTimerExpired()\l+ getVelocity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sprite_player.html",tooltip="Provides an interface for sprite behavior, whether that is a player sprite, or an NPC of some sort ...."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{SpritePowerup\n||+ SpritePowerup()\l+ ~SpritePowerup()\l+ setID()\l+ getID()\l+ isDead()\l+ assignModel()\l+ assignWeapon()\l+ lockOnTarget()\l+ checkDirection()\l+ handleCollision()\l+ handleJump()\l+ setDirection()\l+ unsetDirection()\l+ translateSprite()\l+ updateLocationByVelocity()\l+ getLocation()\l+ getBoundingTriangle()\l+ getBoundingCircle()\l+ setBoundingTriangleSize()\l+ getBoundingBox()\l+ setLocation()\l+ setOffset()\l+ getOffset()\l+ spriteWidth()\l+ spriteHeight()\l+ setVelocities()\l+ increaseAcceleration()\l+ setControlMagnitude()\l+ setAngle()\l+ getAngle()\l+ getControlAngle()\l+ renderSprite()\l+ renderHealthBar()\l+ spriteType()\l+ setAnimation()\l+ getCurrentAnimation()\l+ setHealth()\l+ modifyHealthBy()\l+ getHealth()\l+ getMaxHealth()\l+ getPointValue()\l+ setPointValue()\l+ setLevel()\l+ getLevel()\l+ setPowerUpType()\l+ getPowerUpType()\l+ getWaterLevel()\l+ setWaterLevel()\l+ setJump()\l+ getJump()\l+ getSpeed()\l+ setAttackType()\l+ getAttackType()\l+ modifyRotationBy()\l+ hasPeriodicTimerExpired()\l+ getVelocity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sprite_powerup.html",tooltip="Provides an interface for sprite behavior, whether that is a player sprite, or an NPC of some sort ...."];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{SpriteScenery\n||+ SpriteScenery()\l+ ~SpriteScenery()\l+ setID()\l+ getID()\l+ isDead()\l+ assignModel()\l+ assignWeapon()\l+ lockOnTarget()\l+ checkDirection()\l+ handleCollision()\l+ handleJump()\l+ setDirection()\l+ unsetDirection()\l+ translateSprite()\l+ updateLocationByVelocity()\l+ getLocation()\l+ getBoundingTriangle()\l+ getBoundingCircle()\l+ setBoundingTriangleSize()\l+ getBoundingBox()\l+ setLocation()\l+ setOffset()\l+ getOffset()\l+ spriteWidth()\l+ spriteHeight()\l+ setVelocities()\l+ increaseAcceleration()\l+ setControlMagnitude()\l+ setAngle()\l+ getAngle()\l+ getControlAngle()\l+ renderSprite()\l+ renderHealthBar()\l+ spriteType()\l+ setAnimation()\l+ getCurrentAnimation()\l+ setHealth()\l+ modifyHealthBy()\l+ getHealth()\l+ getMaxHealth()\l+ getPointValue()\l+ setPointValue()\l+ setLevel()\l+ getLevel()\l+ setPowerUpType()\l+ getPowerUpType()\l+ getWaterLevel()\l+ setWaterLevel()\l+ setJump()\l+ getJump()\l+ getSpeed()\l+ setAttackType()\l+ getAttackType()\l+ modifyRotationBy()\l+ hasPeriodicTimerExpired()\l+ getVelocity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sprite_scenery.html",tooltip="Provides an interface for sprite behavior, whether that is a player sprite, or an NPC of some sort ...."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{SpriteTarget\n||+ SpriteTarget()\l+ ~SpriteTarget()\l+ setID()\l+ getID()\l+ isDead()\l+ assignModel()\l+ assignWeapon()\l+ lockOnTarget()\l+ checkDirection()\l+ handleCollision()\l+ handleJump()\l+ setDirection()\l+ unsetDirection()\l+ translateSprite()\l+ updateLocationByVelocity()\l+ getLocation()\l+ getBoundingTriangle()\l+ getBoundingCircle()\l+ setBoundingTriangleSize()\l+ getBoundingBox()\l+ setLocation()\l+ setOffset()\l+ getOffset()\l+ spriteWidth()\l+ spriteHeight()\l+ setVelocities()\l+ increaseAcceleration()\l+ setControlMagnitude()\l+ setAngle()\l+ getAngle()\l+ getControlAngle()\l+ renderSprite()\l+ renderHealthBar()\l+ spriteType()\l+ setAnimation()\l+ getCurrentAnimation()\l+ setHealth()\l+ modifyHealthBy()\l+ getHealth()\l+ getMaxHealth()\l+ getPointValue()\l+ setPointValue()\l+ setLevel()\l+ getLevel()\l+ setPowerUpType()\l+ getPowerUpType()\l+ getWaterLevel()\l+ setWaterLevel()\l+ setJump()\l+ getJump()\l+ getSpeed()\l+ setAttackType()\l+ getAttackType()\l+ modifyRotationBy()\l+ hasPeriodicTimerExpired()\l+ getVelocity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sprite_target.html",tooltip="Provides an interface for sprite behavior, whether that is a player sprite, or an NPC of some sort ...."];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{SpriteTower\n||+ SpriteTower()\l+ ~SpriteTower()\l+ setID()\l+ getID()\l+ isDead()\l+ assignModel()\l+ assignWeapon()\l+ lockOnTarget()\l+ checkDirection()\l+ handleCollision()\l+ handleJump()\l+ setDirection()\l+ unsetDirection()\l+ translateSprite()\l+ updateLocationByVelocity()\l+ getLocation()\l+ getBoundingTriangle()\l+ getBoundingCircle()\l+ setBoundingTriangleSize()\l+ getBoundingBox()\l+ setLocation()\l+ setOffset()\l+ getOffset()\l+ spriteWidth()\l+ spriteHeight()\l+ setVelocities()\l+ increaseAcceleration()\l+ setControlMagnitude()\l+ setAngle()\l+ getAngle()\l+ getControlAngle()\l+ renderSprite()\l+ renderHealthBar()\l+ spriteType()\l+ setAnimation()\l+ getCurrentAnimation()\l+ setHealth()\l+ modifyHealthBy()\l+ getHealth()\l+ getMaxHealth()\l+ getPointValue()\l+ setPointValue()\l+ setLevel()\l+ getLevel()\l+ setPowerUpType()\l+ getPowerUpType()\l+ getWaterLevel()\l+ setWaterLevel()\l+ setJump()\l+ getJump()\l+ getSpeed()\l+ setAttackType()\l+ getAttackType()\l+ modifyRotationBy()\l+ hasPeriodicTimerExpired()\l+ getVelocity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sprite_tower.html",tooltip="Provides an interface for sprite behavior, whether that is a player sprite, or an NPC of some sort ...."];
}
