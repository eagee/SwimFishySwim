digraph "tagLevelInfo"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{tagLevelInfo\n||}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Defines the information that will be used to define the behavior in a level."];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +FinishedLooping" ,arrowhead="odiamond"];
  Node2 [label="{bool\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +BaddieDestination\n+SpriteOffset" ,arrowhead="odiamond"];
  Node3 [label="{Vector\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +CurrentProjectileWeapon\n+CurrentUpgradePoints\n+DisplayUpgradePoints" ,arrowhead="odiamond"];
  Node4 [label="{int\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +CurrentEnergyLevel\n+CurrentPlayerBulletDamage\n+CurrentPlayerRepelDamage" ,arrowhead="odiamond"];
  Node5 [label="{float\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +CurrentSong" ,arrowhead="odiamond"];
  Node6 [label="{SONG_NAME\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +PowerUps" ,arrowhead="odiamond"];
  Node7 [label="{tagLevelPowerupInfo\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structtag_level_powerup_info.html",tooltip="Defines information used to control powerup behavior"];
  Node4 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +CurrentPowerupIndex" ,arrowhead="odiamond"];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +PowerUpSprites" ,arrowhead="odiamond"];
  Node8 [label="{vector\< SpritePowerup \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +RadarPoints" ,arrowhead="odiamond"];
  Node9 [label="{vector\< tagPoint \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node10 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +FloatingTextData" ,arrowhead="odiamond"];
  Node10 [label="{vector\< tagFloatingText \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node11 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +BaddieDetails" ,arrowhead="odiamond"];
  Node11 [label="{tagBaddieDetailInfo\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structtag_baddie_detail_info.html",tooltip="Values used to manage release of baddies during each wave in a level"];
  Node2 -> Node11 [color="grey25",fontsize="10",style="solid",label=" +BaddiesThisWaveAreDead" ,arrowhead="odiamond"];
  Node4 -> Node11 [color="grey25",fontsize="10",style="solid",label=" +CurrentType\n+CurrentlyAlive\n+MaximumThisWave\n+ReleaseIndex\n+WaveIndex" ,arrowhead="odiamond"];
  Node5 -> Node11 [color="grey25",fontsize="10",style="solid",label=" +ReleaseDelay\n+ReleaseTime" ,arrowhead="odiamond"];
  Node12 -> Node11 [color="grey25",fontsize="10",style="solid",label=" +Sprites" ,arrowhead="odiamond"];
  Node12 [label="{vector\< SpriteBaddie \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node13 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +ButtonTexture\n+FocusedButtonTexture\n+LightMap\n+MenuTexture\n+ModelBumpTextures\n+ModelTextures\n+RadarTexture\n+TowerButtonTextures" ,arrowhead="odiamond"];
  Node13 [label="{unsigned int\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node14 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +Models" ,arrowhead="odiamond"];
  Node14 [label="{IModel\n||+ IModel()\l+ ~IModel()\l+ loadFromFile()\l+ assignTexture()\l+ assignBumpTexture()\l+ translateModel()\l+ setAnimationType()\l+ setAnimationType()\l+ setModelScale()\l+ buildVertexArrays()\l+ freeVertexArrays()\l+ renderModel()\l+ renderModel()\l+ handleAnimation()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_model.html",tooltip=" "];
  Node15 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +TowerSprites" ,arrowhead="odiamond"];
  Node15 [label="{vector\< SpriteTower \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node16 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +ScenerySprites" ,arrowhead="odiamond"];
  Node16 [label="{vector\< SpriteScenery \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node17 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +GreatPickle\n+PlayerOneSprite" ,arrowhead="odiamond"];
  Node17 [label="{ISprite\n||+ ISprite()\l+ ~ISprite()\l+ setID()\l+ getID()\l+ isDead()\l+ assignModel()\l+ assignWeapon()\l+ lockOnTarget()\l+ checkDirection()\l+ handleCollision()\l+ handleJump()\l+ setDirection()\l+ unsetDirection()\l+ translateSprite()\l+ updateLocationByVelocity()\l+ getLocation()\l+ getBoundingTriangle()\l+ getBoundingCircle()\l+ setBoundingTriangleSize()\l+ getBoundingBox()\l+ setLocation()\l+ setOffset()\l+ getOffset()\l+ spriteWidth()\l+ spriteHeight()\l+ setVelocities()\l+ increaseAcceleration()\l+ setControlMagnitude()\l+ setAngle()\l+ getAngle()\l+ getControlAngle()\l+ renderSprite()\l+ renderHealthBar()\l+ spriteType()\l+ setAnimation()\l+ getCurrentAnimation()\l+ setHealth()\l+ modifyHealthBy()\l+ getHealth()\l+ getMaxHealth()\l+ setPointValue()\l+ getPointValue()\l+ setLevel()\l+ getLevel()\l+ setPowerUpType()\l+ getPowerUpType()\l+ getWaterLevel()\l+ setWaterLevel()\l+ setJump()\l+ getJump()\l+ getSpeed()\l+ setAttackType()\l+ getAttackType()\l+ modifyRotationBy()\l+ hasPeriodicTimerExpired()\l+ getVelocity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_sprite.html",tooltip=" "];
  Node18 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +Graphics" ,arrowhead="odiamond"];
  Node18 [label="{IGraphics\n||+ beginScene()\l+ endScene()\l+ rotateNextObjectInScene()\l+ addPointsToScene()\l+ addTriangleToScene()\l+ addTrianglesToScene()\l+ addQuadsToScene()\l+ addQuadMapToScene()\l+ addSkyboxToScene()\l+ allocateAndPopulateVertex\lArray()\l+ isLocationWithinViewingRange()\l+ freeVertexArray()\l+ addNormalMappedVertexArray\lToScene()\l+ addNormalMappedVertexArray\lToScene()\l+ updateMirrorReflection()\l+ allocateAndPopulateVertex\lArray()\l+ freeVertexArray()\l+ addVertexArrayToScene()\l+ getFPS()\l+ setCameraPosition()\l+ setCameraTarget()\l+ getCameraAngle()\l+ adjustCameraRadius()\l+ getCameraRadius()\l+ adjustCameraDistance()\l+ getCameraDistance()\l+ getCameraLocation()\l+ setFogMode()\l+ clearTextureData()\l+ addTextureData()\l+ freeTextureData()\l+ switchToOverheadView()\l+ switchBackToCameraView()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_graphics.html",tooltip=" "];
  Node19 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +Controllers" ,arrowhead="odiamond"];
  Node19 [label="{IControllers\n||+ updateControllerStates()\l+ checkButtonPress()\l+ checkButtonRelease()\l+ getStatusOfAllButtons()\l+ checkControllerStatus()\l+ numberOfConnectedDevices()\l+ checkPointer()\l+ checkMotion()\l+ checkOrientation()\l+ checkJoystickAngle()\l+ checkJoystickMagnitude()\l+ stopRumblePack()\l+ startRumblePack()\l+ dispose()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_controllers.html",tooltip=" "];
  Node20 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node20 [label="{ISubject\n||+ ISubject()\l+ ~ISubject()\l+ registerObserver()\l+ removeObserver()\l+ notifyObservers()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_subject.html",tooltip=" "];
  Node21 -> Node19 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal"];
  Node21 [label="{IDisposeable\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_disposeable.html",tooltip=" "];
  Node22 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +ProjectileWeapon\n+ProjectileWeapons" ,arrowhead="odiamond"];
  Node22 [label="{IProjectileWeapon\n||+ IProjectileWeapon()\l+ ~IProjectileWeapon()\l+ getProjectileModel()\l+ getProjectileName()\l+ setWeaponExperience()\l+ getMaxWeaponExperience()\l+ getWeaponExperience()\l+ getWeaponLevelNumber()\l+ getPercentWeaponExperience()\l+ modifyWeaponExperienceBy()\l+ handleSpriteCollisions()\l+ updateWeaponAndProjectiles()\l+ renderProjectiles()\l+ handleTriggerState()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_projectile_weapon.html",tooltip=" "];
  Node23 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +InGameMenu" ,arrowhead="odiamond"];
  Node23 [label="{IGameMenu\n||+ IGameMenu()\l+ ~IGameMenu()\l+ executeMenu()\l+ clickButton()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_game_menu.html",tooltip="Defines the simple interface for all audio protocols (midi, mp3, pcm, controller) /summary>"];
  Node24 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +TileMap" ,arrowhead="odiamond"];
  Node24 [label="{TiledMaps\n||+ TiledMaps()\l+ ~TiledMaps()\l+ assignTextures()\l+ addWaterNormalMap()\l+ clearWaterNormalMaps()\l+ findBestVectorOnPath()\l+ findAngleToDestination()\l+ getTilemapSize()\l+ loadTileMap()\l+ setMinimumBoundary()\l+ translateMap()\l+ getLocation()\l+ setMapVelocity()\l+ checkForCollisionAt()\l+ checkForCollisionAt()\l+ setTempCollisionAt()\l+ getZValueAt()\l+ removeTempCollision()\l+ clearTempCollisionTable()\l+ generateLayerVertexArrays()\l+ freeLayerVertexArrays()\l+ renderLayerVertexArrays()\l+ animationTask()\l+ velocityTask()\l+ getLayerMotion()\l+ shakeMapFor()\l+ getCurrentWaterNormalMap()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_tiled_maps.html",tooltip=" "];
  Node25 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +TextOutput" ,arrowhead="odiamond"];
  Node25 [label="{IText\n||+ IText()\l+ ~IText()\l+ setTextSize()\l+ getTextWidth()\l+ getTextHeight()\l+ getTextSpacing()\l+ assignTexture()\l+ renderText()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_text.html",tooltip=" "];
  Node26 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +Songs\n+Sounds" ,arrowhead="odiamond"];
  Node26 [label="{IAudio\n||+ IAudio()\l+ ~IAudio()\l+ loadFromFile()\l+ playOnce()\l+ playLooped()\l+ stop()\l+ pause()\l+ isPlaying()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_audio.html",tooltip="// Defines the simple interface for all audio protocols (midi, mp3, pcm, controller) /summary>"];
  Node27 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +RepelParticles\n+RippleParticles\n+SparkParticles\n+SplashParticles\n+WarpParticles" ,arrowhead="odiamond"];
  Node27 [label="{ParticleEffect\n||+ ParticleEffect()\l+ ~ParticleEffect()\l+ assignTexture()\l+ addParticles()\l+ updateParticles()\l+ renderParticles()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_particle_effect.html",tooltip="Provides an interface for sprite behavior, whether that is a player sprite, or an NPC of some sort ...."];
  Node28 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node28 [label="{IParticleEffect\n||+ IParticleEffect()\l+ ~IParticleEffect()\l+ assignTexture()\l+ addParticles()\l+ updateParticles()\l+ renderParticles()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_particle_effect.html",tooltip=" "];
}
